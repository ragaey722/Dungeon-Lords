import com.github.spotbugs.snom.SpotBugsTask
import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
    id 'checkstyle'
    id 'de.aaschmid.cpd' version '3.2'
    id 'de.jansauer.printcoverage' version '2.0.0'
    id 'com.github.spotbugs' version '4.7.1'

}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17))
    throw new GradleException("REQUIRES JAVA 17 (WAS ${JavaVersion.current()})")

wrapper {
    gradleVersion = '7.5.1'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    systemtest {
        java {
            srcDir 'src/systemtest/java'
        }
        resources {
            srcDir 'src/systemtest/resources'
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
        compileClasspath += sourceSets.main.output + sourceSets.systemtest.output
        runtimeClasspath += sourceSets.main.output + sourceSets.systemtest.output
    }
}

processResources {
    from('config/simplelogger.properties')
}

configurations {
    systemtestImplementation.extendsFrom implementation
    systemtestRuntimeOnly.extendsFrom runtimeOnly

    testImplementation.extendsFrom systemtestImplementation
    testRuntimeOnly.extendsFrom systemtestRuntimeOnly
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    exclusiveContent {
        forRepository {
            maven {
                url 'https://sopra.se.cs.uni-saarland.de:51623/resources/jars'
                credentials {
                    username 'resources'
                    password 'yRoyl0@|@kpDZ!7TAG9~(k#<+D}s[sssBt8^.;T2jZ2h~Y2Fp*t+_97<{z|n'
                }
                metadataSources {
                    artifact()
                }
            }
        }
        filter {
            includeGroup 'sopra.comm'
            includeGroup 'sopra.systemtest'
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation('sopra.comm:comm-lib:1.1.8') { changing = true }
    implementation 'org.slf4j:slf4j-simple:2.0.0'
    implementation 'org.slf4j:slf4j-api:2.0.0'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'org.json:json:20220320'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.skyscreamer:jsonassert:1.5.1'
    implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.14.1'
    implementation 'org.zeromq:jeromq:0.5.2'
    implementation 'org.msgpack:msgpack-core:0.9.3'

    testImplementation 'org.mockito:mockito-core:4.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    systemtestImplementation('sopra.systemtest:systemtest-api:1.5.4') { changing = true }

    runtimeOnly 'de.aaschmid:gradle-cpd-plugin:3.2'

    pmd 'net.sourceforge.pmd:pmd-java:6.48.0'
    pmd 'net.sourceforge.pmd:pmd-core:6.48.0'

    spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.4.7'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    checkstyle 'com.puppycrawl.tools:checkstyle:10.3.3'
}

task detectSuppressions {
    sourceSets.main.allJava.each { File file ->
        def regex = '(cpd-off)|(nopmd)|(suppress(sb)?warnings)'
        new File(file.path).eachLine { line ->
            if ((line.toLowerCase() =~ regex)) {
                throw new GradleException('Suppressions of analysis tools detected in the following file: ' + file.path)
            }
        }
    }
    sourceSets.test.allJava.each { File file ->
        def regex = '(cpd-off)|(nopmd)|(suppress(sb)?warnings)'
        new File(file.path).eachLine { line ->
            if ((line.toLowerCase() =~ regex)) {
                throw new GradleException('Suppressions of analysis tools detected in the following file: ' + file.path)
            }
        }
    }
    sourceSets.systemtest.allJava.each { File file ->
        def regex = '(cpd-off)|(nopmd)|(suppress(sb)?warnings)'
        new File(file.path).eachLine { line ->
            if ((line.toLowerCase() =~ regex)) {
                throw new GradleException('Suppressions of analysis tools detected in the following file: ' + file.path)
            }
        }
    }
}

tasks.withType(JavaCompile) {
    doFirst {
        println Jvm.current()
    }
    options.encoding 'UTF-8'
    options.compilerArgs += '-Xlint:all'
    options.compilerArgs += '-Xdiags:verbose'
    options.compilerArgs += '-Werror'
    sourceCompatibility = 17
    targetCompatibility = 17
}

tasks.withType(Copy) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

build {
    dependsOn detectSuppressions
    dependsOn check
    dependsOn javadoc
}

pmd {
    toolVersion = '6.48.0'
    ignoreFailures = false
}

tasks.withType(Pmd) {
    incrementalAnalysis.set(false)
    maxFailures.set(0)
    reports {
        html.enabled true
        xml.enabled true
    }
    ruleSets = ["${projectDir}/config/pmd/selab.xml"]
}

printcoverage {
    coverageType.set('INSTRUCTION')
}

jacoco {
    toolVersion = '0.8.7'
}

tasks.withType(JacocoReport) {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
    finalizedBy printCoverage
}

checkstyle {
    toolVersion = '8.36.1'
    ignoreFailures = false
    showViolations = true
    maxWarnings(0)
    maxErrors(0)
    configFile file("${projectDir}/config/checkstyle/checkstyle.xml")
    reportsDir file("${buildDir}/reports/checkstyle")
}

tasks.withType(Checkstyle) {
    reports {
        html.enabled true
        xml.enabled false
    }
}

cpd {
    language = 'java'
    ignoreFailures false
}

cpdCheck {
    reports {
        text.enabled true
        xml.enabled false
        csv.enabled false
    }
    minimumTokenCount = 128
    source = sourceSets.main.allJava
}

spotbugs {
    toolVersion.set('4.4.0')
    ignoreFailures.set(false)
    effort = 'max'
    includeFilter.set(file("${projectDir}/config/spotbugs/include.xml"))
    excludeFilter.set(file("${projectDir}/config/spotbugs/exclude.xml"))
}

tasks.withType(SpotBugsTask) {
    reports {
        html.enabled true
        xml.enabled false
    }
}

test {
    dependsOn(cleanTest)
    useJUnitPlatform()
}

tasks.withType(Test) {
    testClassesDirs = sourceSets.main.output.classesDirs + sourceSets.test.output.classesDirs
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams true
    }
    ignoreFailures false
    finalizedBy jacocoTestReport
}

javadoc {
    options.encoding = 'UTF-8'
    options.addBooleanOption('html5', true)
    options.destinationDirectory = file("${buildDir}/reports/javadoc")
    doLast {
        copy {
            from "${buildDir}/reports/javadoc"
            into "${projectDir}/docs/"
        }
    }
}

jar {
    dependsOn cleanJar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': 'de.unisaarland.cs.se.selab.Main',
                'Entry-Point': 'de.unisaarland.cs.se.selab.Main',
                'Implementation-Title': 'SeLab',
                'Application-Name': 'SeLab',
                'Implementation-Version': project.version,
        )
    }
    archiveFileName = 'selab.jar'
    from 'config/simplelogger.properties'
    from sourceSets.main.output
    from sourceSets.systemtest.output
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from {
        configurations.systemtestCompileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    doLast {
        copy {
            from jar
            into "${projectDir}/libs/"
        }
    }
}

task serverJavaExec(type: JavaExec) {
    dependsOn jar
    classpath files('libs/selab.jar')
    mainClass = 'de.unisaarland.cs.se.selab.Main'
    args = ['--port', SERVER_PORT, '--timeout', SERVER_TIMEOUT, '--config', CONFIG, '--seed', SEED]
}

task systemtestJavaExec(type: JavaExec) {
    dependsOn jar
    doFirst {
        delete 'test_tmp'
    }
    classpath files('libs/selab.jar')
    mainClass = 'de.unisaarland.cs.se.selab.systemtest.Main'
    args = ['--jar', 'libs/selab.jar', '--port', TEST_PORT, '--timeout', TEST_TIMEOUT, '--system']
    doLast {
        delete 'test_tmp'
    }
}

task getHomeDir {
    doLast {
        println gradle.gradleHomeDir
    }
}
